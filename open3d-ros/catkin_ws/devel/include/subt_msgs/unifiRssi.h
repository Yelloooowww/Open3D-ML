// Generated by gencpp from file subt_msgs/unifiRssi.msg
// DO NOT EDIT!


#ifndef SUBT_MSGS_MESSAGE_UNIFIRSSI_H
#define SUBT_MSGS_MESSAGE_UNIFIRSSI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace subt_msgs
{
template <class ContainerAllocator>
struct unifiRssi_
{
  typedef unifiRssi_<ContainerAllocator> Type;

  unifiRssi_()
    : header()
    , client_name()
    , connect_ap_name()
    , client_rssi(0)
    , ap_name()
    , ap_rssi(0)  {
    }
  unifiRssi_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , client_name(_alloc)
    , connect_ap_name(_alloc)
    , client_rssi(0)
    , ap_name(_alloc)
    , ap_rssi(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _client_name_type;
  _client_name_type client_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _connect_ap_name_type;
  _connect_ap_name_type connect_ap_name;

   typedef uint16_t _client_rssi_type;
  _client_rssi_type client_rssi;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ap_name_type;
  _ap_name_type ap_name;

   typedef uint16_t _ap_rssi_type;
  _ap_rssi_type ap_rssi;





  typedef boost::shared_ptr< ::subt_msgs::unifiRssi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subt_msgs::unifiRssi_<ContainerAllocator> const> ConstPtr;

}; // struct unifiRssi_

typedef ::subt_msgs::unifiRssi_<std::allocator<void> > unifiRssi;

typedef boost::shared_ptr< ::subt_msgs::unifiRssi > unifiRssiPtr;
typedef boost::shared_ptr< ::subt_msgs::unifiRssi const> unifiRssiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subt_msgs::unifiRssi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subt_msgs::unifiRssi_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::subt_msgs::unifiRssi_<ContainerAllocator1> & lhs, const ::subt_msgs::unifiRssi_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.client_name == rhs.client_name &&
    lhs.connect_ap_name == rhs.connect_ap_name &&
    lhs.client_rssi == rhs.client_rssi &&
    lhs.ap_name == rhs.ap_name &&
    lhs.ap_rssi == rhs.ap_rssi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::subt_msgs::unifiRssi_<ContainerAllocator1> & lhs, const ::subt_msgs::unifiRssi_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace subt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::unifiRssi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subt_msgs::unifiRssi_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::unifiRssi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subt_msgs::unifiRssi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::unifiRssi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subt_msgs::unifiRssi_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subt_msgs::unifiRssi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9df6040c2bb377a5a4138aa41245a942";
  }

  static const char* value(const ::subt_msgs::unifiRssi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9df6040c2bb377a5ULL;
  static const uint64_t static_value2 = 0xa4138aa41245a942ULL;
};

template<class ContainerAllocator>
struct DataType< ::subt_msgs::unifiRssi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subt_msgs/unifiRssi";
  }

  static const char* value(const ::subt_msgs::unifiRssi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subt_msgs::unifiRssi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string client_name\n"
"string connect_ap_name\n"
"uint16 client_rssi\n"
"string ap_name\n"
"uint16 ap_rssi\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::subt_msgs::unifiRssi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subt_msgs::unifiRssi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.client_name);
      stream.next(m.connect_ap_name);
      stream.next(m.client_rssi);
      stream.next(m.ap_name);
      stream.next(m.ap_rssi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct unifiRssi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subt_msgs::unifiRssi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subt_msgs::unifiRssi_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "client_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.client_name);
    s << indent << "connect_ap_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.connect_ap_name);
    s << indent << "client_rssi: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.client_rssi);
    s << indent << "ap_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ap_name);
    s << indent << "ap_rssi: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ap_rssi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBT_MSGS_MESSAGE_UNIFIRSSI_H
